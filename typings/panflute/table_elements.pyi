from .base import Block as Block, Element as Element, Inline as Inline
from .containers import ListContainer as ListContainer
from .utils import check_group as check_group, check_type as check_type, check_type_or_value as check_type_or_value, debug as debug, decode_ica as decode_ica, encode_dict as encode_dict
from _typeshed import Incomplete

class Table(Block):
    colspec: Incomplete
    def __init__(self, *args, head: Incomplete | None = None, foot: Incomplete | None = None, caption: Incomplete | None = None, colspec: Incomplete | None = None, identifier: str = '', classes=[], attributes={}) -> None: ...
    @property
    def head(self): ...
    @head.setter
    def head(self, value) -> None: ...
    @property
    def foot(self): ...
    @foot.setter
    def foot(self, value) -> None: ...
    @property
    def caption(self): ...
    @caption.setter
    def caption(self, value) -> None: ...

class TableHead(Block):
    def __init__(self, *args, identifier: str = '', classes=[], attributes={}) -> None: ...
    def to_json(self): ...

class TableFoot(Block):
    def __init__(self, *args, identifier: str = '', classes=[], attributes={}) -> None: ...
    def to_json(self): ...

class TableBody(Block):
    row_head_columns: Incomplete
    def __init__(self, *args, head: Incomplete | None = None, row_head_columns: int = 0, identifier: str = '', classes=[], attributes={}) -> None: ...
    @property
    def head(self): ...
    @head.setter
    def head(self, value) -> None: ...

class TableRow(Element):
    def __init__(self, *args, identifier: str = '', classes=[], attributes={}) -> None: ...
    def to_json(self): ...

class TableCell(Element):
    alignment: Incomplete
    rowspan: Incomplete
    colspan: Incomplete
    def __init__(self, *args, alignment: str = 'AlignDefault', rowspan: int = 1, colspan: int = 1, identifier: str = '', classes=[], attributes={}) -> None: ...
    def to_json(self): ...

class Caption(Element):
    def __init__(self, *args, short_caption: Incomplete | None = None) -> None: ...
    def to_json(self): ...
    @property
    def short_caption(self): ...
    @short_caption.setter
    def short_caption(self, value) -> None: ...

TABLE_ALIGNMENT: Incomplete
TABLE_WIDTH: Incomplete

def count_columns_in_row(row): ...
def colspec_to_json(c): ...
def cell_from_json(c): ...
def row_from_json(c): ...
def body_from_json(c): ...
def table_from_json(c): ...
