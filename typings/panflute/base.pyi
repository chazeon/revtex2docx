from .containers import DictContainer as DictContainer, ListContainer as ListContainer
from .utils import check_type as check_type, encode_dict as encode_dict
from _typeshed import Incomplete
from collections.abc import MutableMapping as MutableMapping, MutableSequence as MutableSequence
from operator import attrgetter as attrgetter

class Element:
    def __new__(cls, *args, **kwargs): ...
    @property
    def tag(self): ...
    def __eq__(self, other): ...
    def to_json(self): ...
    @property
    def content(self): ...
    @content.setter
    def content(self, value) -> None: ...
    @property
    def container(self): ...
    def offset(self, n): ...
    @property
    def next(self): ...
    @property
    def prev(self): ...
    def ancestor(self, n): ...
    @property
    def doc(self): ...
    def walk(self, action, doc: Incomplete | None = None, stop_if: Incomplete | None = None): ...

class Inline(Element): ...
class Block(Element): ...
class MetaValue(Element): ...
