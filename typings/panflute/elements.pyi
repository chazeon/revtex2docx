from .base import Block as Block, Element as Element, Inline as Inline, MetaValue as MetaValue
from .containers import DictContainer as DictContainer, ListContainer as ListContainer, MutableMapping as MutableMapping, MutableSequence as MutableSequence  # type: ignore[attr-defined]
from .table_elements import Caption as Caption, TABLE_ALIGNMENT as TABLE_ALIGNMENT, TABLE_WIDTH as TABLE_WIDTH, Table as Table, TableBody as TableBody, TableCell as TableCell, TableFoot as TableFoot, TableHead as TableHead, TableRow as TableRow, table_from_json as table_from_json
from .utils import check_group as check_group, check_type as check_type, check_type_or_value as check_type_or_value, debug as debug, decode_ica as decode_ica, encode_dict as encode_dict, load_pandoc_reader_options as load_pandoc_reader_options, load_pandoc_version as load_pandoc_version
from _typeshed import Incomplete

class Doc(Element):
    format: Incomplete
    api_version: Incomplete
    pandoc_version: Incomplete
    pandoc_reader_options: Incomplete
    def __init__(self, *args, metadata={}, format: str = 'html', api_version=(1, 23)) -> None: ...
    def __eq__(self, other): ...
    @property
    def metadata(self): ...
    @metadata.setter
    def metadata(self, value) -> None: ...
    def to_json(self): ...

class Null(Block):
    def to_json(self): ...

class Space(Inline):
    def to_json(self): ...

class HorizontalRule(Block):
    def to_json(self): ...

class SoftBreak(Inline):
    def to_json(self): ...

class LineBreak(Inline):
    def to_json(self): ...

class Plain(Block):
    def __init__(self, *args) -> None: ...

class Para(Block):
    def __init__(self, *args) -> None: ...

class BlockQuote(Block):
    def __init__(self, *args) -> None: ...

class Emph(Inline):
    def __init__(self, *args) -> None: ...

class Strong(Inline):
    def __init__(self, *args) -> None: ...

class Underline(Inline):
    def __init__(self, *args) -> None: ...

class Strikeout(Inline):
    def __init__(self, *args) -> None: ...

class Superscript(Inline):
    def __init__(self, *args) -> None: ...

class Subscript(Inline):
    def __init__(self, *args) -> None: ...

class SmallCaps(Inline):
    def __init__(self, *args) -> None: ...

class Note(Inline):
    def __init__(self, *args) -> None: ...

class Header(Block):
    level: Incomplete
    def __init__(self, *args, level: int = 1, identifier: str = '', classes=[], attributes={}) -> None: ...

class Div(Block):
    def __init__(self, *args, identifier: str = '', classes=[], attributes={}) -> None: ...

class Span(Inline):
    def __init__(self, *args, identifier: str = '', classes=[], attributes={}) -> None: ...

class Quoted(Inline):
    quote_type: Incomplete
    def __init__(self, *args, quote_type: str = 'DoubleQuote') -> None: ...

class Cite(Inline):
    def __init__(self, *args, citations=[]) -> None: ...
    @property
    def citations(self): ...
    @citations.setter
    def citations(self, value) -> None: ...

class Citation(Element):
    id: Incomplete
    mode: Incomplete
    hash: Incomplete
    note_num: Incomplete
    def __init__(self, id, mode: str = 'NormalCitation', prefix: str = '', suffix: str = '', hash: int = 0, note_num: int = 0) -> None: ...
    @property
    def prefix(self): ...
    @prefix.setter
    def prefix(self, value) -> None: ...
    @property
    def suffix(self): ...
    @suffix.setter
    def suffix(self, value) -> None: ...
    def to_json(self): ...
    def to_json_legacy(self): ...

class Link(Inline):
    url: Incomplete
    title: Incomplete
    def __init__(self, *args, url: str = '', title: str = '', identifier: str = '', classes=[], attributes={}) -> None: ...

class Image(Inline):
    url: Incomplete
    title: Incomplete
    def __init__(self, *args, url: str = '', title: str = '', identifier: str = '', classes=[], attributes={}) -> None: ...

class Str(Inline):
    text: Incomplete
    def __init__(self, text) -> None: ...

class CodeBlock(Block):
    text: Incomplete
    def __init__(self, text, identifier: str = '', classes=[], attributes={}) -> None: ...

class RawBlock(Block):
    text: Incomplete
    format: Incomplete
    def __init__(self, text, format: str = 'html') -> None: ...

class Code(Inline):
    text: Incomplete
    def __init__(self, text, identifier: str = '', classes=[], attributes={}) -> None: ...

class Math(Inline):
    text: Incomplete
    format: Incomplete
    def __init__(self, text, format: str = 'DisplayMath') -> None: ...

class RawInline(Inline):
    text: Incomplete
    format: Incomplete
    def __init__(self, text, format: str = 'html') -> None: ...

class ListItem(Element):
    def __init__(self, *args) -> None: ...
    def to_json(self): ...

class BulletList(Block):
    def __init__(self, *args) -> None: ...

class OrderedList(Block):
    start: Incomplete
    style: Incomplete
    delimiter: Incomplete
    def __init__(self, *args, start: int = 1, style: str = 'Decimal', delimiter: str = 'Period') -> None: ...

class Definition(Element):
    def __init__(self, *args) -> None: ...
    def to_json(self): ...

class DefinitionItem(Element):
    def __init__(self, term, definitions) -> None: ...
    @property
    def term(self): ...
    @term.setter
    def term(self, value) -> None: ...
    @property
    def definitions(self): ...
    @definitions.setter
    def definitions(self, value) -> None: ...
    def to_json(self): ...

class DefinitionList(Block):
    def __init__(self, *args) -> None: ...

class LineItem(Element):
    def __init__(self, *args) -> None: ...
    def to_json(self): ...

class LineBlock(Block):
    def __init__(self, *args) -> None: ...

class Figure(Block):
    def __init__(self, *args, caption: Incomplete | None = None, identifier: str = '', classes=[], attributes={}) -> None: ...
    @property
    def caption(self): ...
    @caption.setter
    def caption(self, value) -> None: ...

class MetaList(MetaValue, MutableSequence):
    def __init__(self, *args) -> None: ...
    def __getitem__(self, i): ...
    def __setitem__(self, i, v) -> None: ...
    def __delitem__(self, i) -> None: ...
    def __len__(self) -> int: ...
    def insert(self, i, v) -> None: ...

class MetaMap(MetaValue, MutableMapping):
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def content(self): ...
    @content.setter
    def content(self, value) -> None: ...
    def __getitem__(self, i): ...
    def __setitem__(self, i, v) -> None: ...
    def __delitem__(self, i) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...

class MetaInlines(MetaValue):
    def __init__(self, *args) -> None: ...

class MetaBlocks(MetaValue):
    def __init__(self, *args) -> None: ...

class MetaString(MetaValue):
    text: Incomplete
    def __init__(self, text) -> None: ...

class MetaBool(MetaValue):
    boolean: Incomplete
    def __init__(self, boolean) -> None: ...

LIST_NUMBER_STYLES: Incomplete
LIST_NUMBER_DELIMITERS: Incomplete
QUOTE_TYPES: Incomplete
CITATION_MODE: Incomplete
MATH_FORMATS: Incomplete
RAW_FORMATS: Incomplete
SPECIAL_ELEMENTS: Incomplete
EMPTY_ELEMENTS: Incomplete

def from_json(data): ...
def builtin2meta(val): ...
