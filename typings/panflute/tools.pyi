from .elements import *
from .base import Element as Element
from .io import dump as dump
from _typeshed import Incomplete

PANDOC_PATH: Incomplete
HorizontalSpaces: Incomplete
VerticalSpaces: Incomplete

class PandocVersion:
    def __init__(self) -> None: ...
    @property
    def version(self) -> tuple[int, ...]: ...
    @property
    def data_dir(self): ...

pandoc_version: Incomplete

def yaml_filter(element, doc, tag: Incomplete | None = None, function: Incomplete | None = None, tags: Incomplete | None = None, strict_yaml: bool = False): ...
def stringify(element, newlines: bool = True): ...
def meta2builtin(meta): ...
def shell(args, wait: bool = True, msg: Incomplete | None = None): ...
def run_pandoc(text: str = '', args: Incomplete | None = None, pandoc_path: Incomplete | None = None): ...
def convert_text(text, input_format: str = 'markdown', output_format: str = 'panflute', standalone: bool = False, extra_args: Incomplete | None = None, pandoc_path: Incomplete | None = None): ...
def inner_convert_text(text, input_format, output_format, extra_args, pandoc_path: Incomplete | None = None): ...
def get_option(options: Incomplete | None = None, local_tag: Incomplete | None = None, doc: Incomplete | None = None, doc_tag: Incomplete | None = None, default: Incomplete | None = None, error_on_none: bool = True): ...
