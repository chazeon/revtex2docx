from _typeshed import Incomplete
from collections.abc import Generator

__all__ = ['TexNode', 'TexCmd', 'TexEnv', 'TexGroup', 'BracketGroup', 'BraceGroup', 'TexArgs', 'TexText', 'TexMathEnv', 'TexDisplayMathEnv', 'TexNamedEnv', 'TexMathModeEnv', 'TexDisplayMathModeEnv']

class TexNode:
    expr: Incomplete
    parent: Incomplete
    char_to_line: Incomplete
    def __init__(self, expr, src: Incomplete | None = None) -> None: ...
    def __contains__(self, other) -> bool: ...
    def __getattr__(self, attr, default: Incomplete | None = None): ...
    def __getitem__(self, item): ...
    def __iter__(self): ...
    def __match__(self, name: Incomplete | None = None, attrs=()): ...
    @property
    def all(self) -> Generator[Incomplete, None, None]: ...
    @property
    def args(self): ...
    @args.setter
    def args(self, args) -> None: ...
    @property
    def children(self) -> Generator[Incomplete, None, None]: ...
    @property
    def contents(self) -> Generator[Incomplete, None, None]: ...
    @contents.setter
    def contents(self, contents) -> None: ...
    @property
    def descendants(self): ...
    @property
    def name(self): ...
    @name.setter
    def name(self, name) -> None: ...
    @property
    def string(self): ...
    @string.setter
    def string(self, string) -> None: ...
    @property
    def position(self): ...
    @property
    def text(self) -> Generator[Incomplete, Incomplete, None]: ...
    def append(self, *nodes) -> None: ...
    def insert(self, i, *nodes) -> None: ...
    def char_pos_to_line(self, char_pos): ...
    def copy(self): ...
    def count(self, name: Incomplete | None = None, **attrs): ...
    def delete(self) -> None: ...
    def find(self, name: Incomplete | None = None, **attrs): ...
    def find_all(self, name: Incomplete | None = None, **attrs) -> Generator[Incomplete, None, None]: ...
    def remove(self, node) -> None: ...
    def replace_with(self, *nodes) -> None: ...
    def replace(self, child, *nodes) -> None: ...
    def search_regex(self, pattern) -> Generator[Incomplete, None, None]: ...

class TexExpr:
    name: Incomplete
    args: Incomplete
    parent: Incomplete
    preserve_whitespace: Incomplete
    position: Incomplete
    def __init__(self, name, contents=(), args=(), preserve_whitespace: bool = False, position: int = -1) -> None: ...
    def __eq__(self, other): ...
    def __match__(self, name: Incomplete | None = None, attrs=()): ...
    @property
    def all(self) -> Generator[Incomplete, None, None]: ...
    @property
    def children(self): ...
    @property
    def contents(self) -> Generator[Incomplete, None, None]: ...
    @contents.setter
    def contents(self, contents) -> None: ...
    @property
    def string(self): ...
    @string.setter
    def string(self, s) -> None: ...
    def append(self, *exprs) -> None: ...
    def insert(self, i, *exprs) -> None: ...
    def remove(self, expr): ...

class TexEnv(TexExpr):
    def __init__(self, name, begin, end, contents=(), args=(), preserve_whitespace: bool = False, position: int = -1) -> None: ...
    @property
    def begin(self): ...
    @begin.setter
    def begin(self, begin) -> None: ...
    @property
    def end(self): ...
    @end.setter
    def end(self, end) -> None: ...
    def __match__(self, name: Incomplete | None = None, attrs=()): ...

class TexNamedEnv(TexEnv):
    def __init__(self, name, contents=(), args=(), preserve_whitespace: bool = False, position: int = -1) -> None: ...
    @property # type: ignore[misc]
    def begin(self): ...
    @property # type: ignore[misc]
    def end(self): ...

class TexUnNamedEnv(TexEnv):
    name: Incomplete
    begin: Incomplete
    end: Incomplete
    def __init__(self, contents=(), args=(), preserve_whitespace: bool = False, position: int = -1) -> None: ...

class TexDisplayMathModeEnv(TexUnNamedEnv):
    name: str
    begin: str
    end: str
    token_begin: Incomplete
    token_end: Incomplete

class TexMathModeEnv(TexUnNamedEnv):
    name: str
    begin: str
    end: str
    token_begin: Incomplete
    token_end: Incomplete

class TexDisplayMathEnv(TexUnNamedEnv):
    name: str
    begin: str
    end: str
    token_begin: Incomplete
    token_end: Incomplete

class TexMathEnv(TexUnNamedEnv):
    name: str
    begin: str
    end: str
    token_begin: Incomplete
    token_end: Incomplete

class TexCmd(TexExpr): ...

class TexText(TexExpr, str):
    def __init__(self, text, position: int = -1) -> None: ...
    def __contains__(self, other) -> bool: ...
    def __eq__(self, other): ...

class TexGroup(TexUnNamedEnv):
    def __init__(self, *contents, preserve_whitespace: bool = False, position: int = -1) -> None: ...
    @classmethod
    def parse(cls, s): ...

class BracketGroup(TexGroup):
    begin: str
    end: str
    name: str
    token_begin: Incomplete
    token_end: Incomplete

class BraceGroup(TexGroup):
    begin: str
    end: str
    name: str
    token_begin: Incomplete
    token_end: Incomplete

class TexArgs(list):
    all: Incomplete
    def __init__(self, args=[]) -> None: ...
    def append(self, arg) -> None: ...
    def extend(self, args) -> None: ...
    def insert(self, i, arg) -> None: ...
    def remove(self, item) -> None: ...
    def pop(self, i): ...
    def reverse(self) -> None: ...
    def clear(self) -> None: ...
    def __getitem__(self, key): ...
    def __contains__(self, item) -> bool: ...
